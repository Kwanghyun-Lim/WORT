!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIN_DIR	Makefile	/^BIN_DIR=.\/$/;"	m
CACHE_LINE_SIZE	B+Tree.h	6;"	d
CFLAGS	Makefile	/^CFLAGS= -c $/;"	m
IN	B+Tree.h	/^typedef struct Internal_Node IN;$/;"	t	typeref:struct:Internal_Node
INPUT_NUM	main.c	8;"	d	file:
IN_count	B+Tree.c	/^unsigned long IN_count = 0;$/;"	v
IN_count	B+Tree.h	/^unsigned long IN_count;$/;"	v
Insert	B+Tree.c	/^void Insert(tree *t, unsigned long key, void *value)$/;"	f
Internal_Node	B+Tree.h	/^struct Internal_Node {$/;"	s
LN	B+Tree.h	/^typedef struct Leaf_Node LN;$/;"	t	typeref:struct:Leaf_Node
LN_count	B+Tree.c	/^unsigned long LN_count = 0;$/;"	v
LN_count	B+Tree.h	/^unsigned long LN_count;$/;"	v
Leaf_Node	B+Tree.h	/^struct Leaf_Node {$/;"	s
Lookup	B+Tree.c	/^void *Lookup(tree *t, unsigned long key)$/;"	f
MIN_IN_ENTRIES	B+Tree.h	4;"	d
MIN_LN_ENTRIES	B+Tree.h	5;"	d
NUM_IN_ENTRY	B+Tree.h	3;"	d
NUM_LN_ENTRY	B+Tree.h	2;"	d
Range_Lookup	B+Tree.c	/^void Range_Lookup(tree *t, unsigned long start_key, unsigned int num, $/;"	f
Search	B+Tree.c	/^int Search(IN *curr, unsigned long key)$/;"	f
THIS_IN	B+Tree.h	7;"	d
THIS_LN	B+Tree.h	8;"	d
allocINode	B+Tree.c	/^IN *allocINode()$/;"	f
allocLNode	B+Tree.c	/^LN *allocLNode()$/;"	f
find_leaf_node	B+Tree.c	/^void *find_leaf_node(void *curr, unsigned long key) $/;"	f
flush_buffer_nocount	B+Tree.c	/^void flush_buffer_nocount(void *buf, unsigned long len, bool fence)$/;"	f
initTree	B+Tree.c	/^tree *initTree()$/;"	f
insert_in_inner	B+Tree.c	/^void insert_in_inner(IN *curr, unsigned long key, void *child)$/;"	f
insert_in_leaf	B+Tree.c	/^void insert_in_leaf(LN *curr, unsigned long key, void *value)$/;"	f
insert_in_parent	B+Tree.c	/^void insert_in_parent(tree *t, void *curr, unsigned long key, void *splitNode) {$/;"	f
keys	B+Tree.h	/^	unsigned long keys[NUM_IN_ENTRY];$/;"	m	struct:Internal_Node
keys	B+Tree.h	/^	unsigned long keys[NUM_LN_ENTRY];$/;"	m	struct:Leaf_Node
leftmostPtr	B+Tree.h	/^	void *leftmostPtr;$/;"	m	struct:Internal_Node
main	main.c	/^int main(void)$/;"	f
mfence	B+Tree.c	11;"	d	file:
nKeys	B+Tree.h	/^	unsigned int nKeys;$/;"	m	struct:Internal_Node
nKeys	B+Tree.h	/^	unsigned int nKeys;$/;"	m	struct:Leaf_Node
pNext	B+Tree.h	/^	LN *pNext;$/;"	m	struct:Leaf_Node
parent	B+Tree.h	/^	IN *parent;$/;"	m	struct:Internal_Node
parent	B+Tree.h	/^	IN *parent;$/;"	m	struct:Leaf_Node
ptr	B+Tree.h	/^	void *ptr[NUM_IN_ENTRY];$/;"	m	struct:Internal_Node
ptr	B+Tree.h	/^	void *ptr[NUM_LN_ENTRY];$/;"	m	struct:Leaf_Node
root	B+Tree.h	/^	void *root;$/;"	m	struct:tree
tree	B+Tree.h	/^struct tree {$/;"	s
tree	B+Tree.h	/^typedef struct tree tree;$/;"	t	typeref:struct:tree
type	B+Tree.h	/^	unsigned char type;$/;"	m	struct:Internal_Node
type	B+Tree.h	/^	unsigned char type;$/;"	m	struct:Leaf_Node
